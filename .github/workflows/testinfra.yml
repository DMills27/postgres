name: Testinfra Integration Tests

on:
  pull_request:
  workflow_dispatch:

jobs:
  test-all-in-one:
    strategy:
      matrix:
        include:
          - runner: [self-hosted, X64]
            arch: amd64
          - runner: arm-runner
            arch: arm64
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      # actions/setup-python doesn't support arm: https://github.com/actions/setup-python/issues/678
      - if: ${{ matrix.arch != 'arm64' }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - if: ${{ matrix.arch == 'arm64' }}
        uses: deadsnakes/action@v3.0.1
        with:
          python-version: 3.12

      - uses: snok/install-poetry@v1
        with:
          version: 1.6.1

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders

      - name: Run aio integration tests
        run: cd testinfra && poetry install && poetry run pytest -vv test_all_in_one.py

  test-ami:
    strategy:
      matrix:
        include:
          - runner: arm-runner
            arch: arm64
            ubuntu_release: focal
            ubuntu_version: 20.04
            mcpu: neoverse-n1
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 150
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # actions/setup-python doesn't support arm: https://github.com/actions/setup-python/issues/678
      - uses: deadsnakes/action@v3.0.1
        with:
          python-version: 3.12

      - uses: snok/install-poetry@v1
        with:
          version: 1.6.1

      - uses: ./.github/actions/build-pg-extensions-and-deb
        with:
          arch: ${{ matrix.arch }}
          ubuntu_release: ${{ matrix.ubuntu_release }}
          ubuntu_version: ${{ matrix.ubuntu_version }}
          mcpu: ${{ matrix.mcpu }}

      # Packer doesn't support skipping registering the AMI for the ebssurrogate
      # builder, so we register an AMI with a fixed name and run tests on an
      # instance launched from that
      # https://github.com/hashicorp/packer/issues/4899
      - name: Build AMI
        run: |
          GIT_SHA=${{github.sha}}
          packer build -var "git-head-version=${GIT_SHA}" -var "packer-execution-id=${GITHUB_RUN_ID}" -var-file="development-arm.vars.pkr.hcl" -var-file="common.vars.pkr.hcl" -var "ansible_arguments=" -var "postgres-version=ci-ami-test" -var "region=ap-southeast-1" -var 'ami_regions=["ap-southeast-1"]' -var "force-deregister=true" amazon-arm64.pkr.hcl

      - name: Run AMI integration tests
        run: cd testinfra && poetry install && poetry run pytest -vv test_ami.py

      - name: Cleanup resources on build cancellation
        if: ${{ cancelled() }}
        run: |
          aws ec2 --region ap-southeast-1 describe-instances --filters "Name=tag:packerExecutionId,Values=${GITHUB_RUN_ID}" --query "Reservations[].Instances[].InstanceId" --output text | xargs -I {} aws ec2 terminate-instances --instance-ids {}
